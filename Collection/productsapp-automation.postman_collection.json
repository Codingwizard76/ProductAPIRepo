{
	"info": {
		"_postman_id": "6afb53a2-2dc0-4b75-b9be-3da9f7f5da60",
		"name": "productsapp-automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//test id at index [0]\r",
							"pm.test(\"response to have an id\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[0].Id;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[0].Id\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [0].Id to be 1\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(1).to.equal(jsonData[0].Id)\r",
							"});\r",
							"\r",
							"//test Name at index[0]\r",
							"pm.test(\"response to have an Name\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[0].Name;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[0].Name\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [0].Name to be Tomato Soup\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(\"Tomato Soup\").to.equal(jsonData[0].Name)\r",
							"});\r",
							"\r",
							"//test Category at index[0]\r",
							"pm.test(\"response to have a Category\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[0].Category;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[0].Category\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [0].Category to be Groceries\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(\"Groceries\").to.equal(jsonData[0].Category)\r",
							"});\r",
							"\r",
							"\r",
							"//test Price at index[0]\r",
							"pm.test(\"response to have a Price\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[0].Price;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[0].Price\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [0].Price to be 1.0\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(1.0).to.equal(jsonData[0].Price)\r",
							"});\r",
							"\r",
							"\r",
							"//////////////////////////////////////////////////////////////////////////////////////\r",
							"//test id at index [1]\r",
							"pm.test(\"response to have an id\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[1].Id;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[1].Id\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [1].Id to be 2\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(2).to.equal(jsonData[1].Id)\r",
							"});\r",
							"\r",
							"//test Name at index[1]\r",
							"pm.test(\"response to have an Name\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[1].Name;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[1].Name\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [1].Name to be Yo-yo\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(\"Yo-yo\").to.equal(jsonData[1].Name)\r",
							"});\r",
							"\r",
							"//test Category at index[1]\r",
							"pm.test(\"response to have a Category\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[1].Category;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[1].Category\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [1].Category to be Toys\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(\"Toys\").to.equal(jsonData[1].Category)\r",
							"});\r",
							"\r",
							"\r",
							"//test Price at index[1]\r",
							"pm.test(\"response to have a Price\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[1].Price;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[1].Price\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [1].Price to be 3.75\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(3.75).to.equal(jsonData[1].Price)\r",
							"});\r",
							"\r",
							"///////////////////////////////////////////////////////////////////////////////////////////////////////////\r",
							"//test id at index [2]\r",
							"pm.test(\"response to have an id\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[2].Id;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[2].Id\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [2].Id to be 3\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(3).to.equal(jsonData[2].Id)\r",
							"});\r",
							"\r",
							"//test Name at index[2]\r",
							"pm.test(\"response to have an Name\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[2].Name;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[0].Name\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [2].Name to be Hammer\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(\"Hammer\").to.equal(jsonData[2].Name)\r",
							"});\r",
							"\r",
							"//test Category at index[2]\r",
							"pm.test(\"response to have a Hardware\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[2].Category;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[2].Category\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [2].Category to be Hardware\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(\"Hardware\").to.equal(jsonData[2].Category)\r",
							"});\r",
							"\r",
							"\r",
							"//test Price at index[2]\r",
							"pm.test(\"response to have a Price\", function(){\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"jsonData[2].Price;\r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"[2].Price\")\r",
							"\r",
							"});\r",
							"pm.test(\"value of [2].Price to be 16.99\", function(){\r",
							"      var jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(16.99).to.equal(jsonData[2].Price)\r",
							"});\r",
							"//step 21 add the followig test to my test lab\r",
							"pm.test(\"response to be 200 OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response time less than 1000MS\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44363/api/products",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44363",
					"path": [
						"",
						"api",
						"products"
					],
					"query": [
						{
							"key": "id",
							"value": "https://localhost:44363/api/products/{id}",
							"description": "Gets the id",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Second Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// step 24, 2 JSON general response tests\r",
							"pm.test(\"response to be 200 \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response time less than 1000MS\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"// step 24 continued, Select one of the products and write 4\r",
							"//JSON Content tests for each of the variables returned\r",
							"\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"// test 1\r",
							"// test to see if the produt name is Yo-yo in the body\r",
							"pm.test(\"Name of product is Yo-yo\", function () {\r",
							"    pm.expect(response.Name).to.eql(\"Yo-yo\");\r",
							"});\r",
							"\r",
							"//test 2 to see if the category of the products is Toys in the body\r",
							"\r",
							"pm.test(\"Category of product is Toys\", function () {\r",
							"    pm.expect(response.Category).to.eql(\"Toys\");\r",
							"});\r",
							"\r",
							"// Test 3, check to see if the products price equal 3.75 in the body of products\r",
							"pm.test(\"Price of product is 3.75\", function () {\r",
							"    pm.expect(response.Price).to.eql(3.75);\r",
							"});\r",
							"\r",
							"// Test 4, check to see if the product Id is 2 for the products body\r",
							"pm.test(\"Id of product is 2\", function () {\r",
							"    pm.expect(response.Id).to.eql(2);\r",
							"});\r",
							"\r",
							"// 4 JSON structure test for each of the variables \r",
							"// test 1 checks to see if the Id is structure in a number array format\r",
							"pm.test(\"Check type of Id\", () => {\r",
							"    _.each(pm.response.json().response, (item) => {\r",
							"        pm.expect(typeof item[\"Id\"]).to.be.oneOf(['number', 'array']);\r",
							"    })\r",
							"})\r",
							"//test 2 check to see if the Name variable is in a string array format.\r",
							"pm.test(\"Check type\", () => {\r",
							"    _.each(pm.response.json().response, (item) => {\r",
							"        pm.expect(typeof item[\"Name\"]).to.be.oneOf(['string', 'array']);\r",
							"    })\r",
							"})\r",
							"// test 3 check to see if category is in a string array format \r",
							"pm.test(\"Check type for category\", () => {\r",
							"    _.each(pm.response.json().response, (products) => {\r",
							"        pm.expect(typeof products[\"category\"]).to.be.oneOf(['string', 'array']);\r",
							"    })\r",
							"})\r",
							"\r",
							"// test 4 check to see if price is a number an in the array format\r",
							"pm.test(\"Check type for price\", () => {\r",
							"    _.each(pm.response.json().response, (products) => { \r",
							"        pm.expect(typeof products[\"price\"]).to.be.oneOf(['number', 'array']);\r",
							"    })\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44363/api/products/2",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44363",
					"path": [
						"api",
						"products",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "variable_key",
			"value": ""
		}
	]
}